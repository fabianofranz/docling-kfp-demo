# PIPELINE DEFINITION
# Name: data-processing-docling-pipeline
# Description: Docling convert pipeline by the Data Processing Team
# Inputs:
#    docling_image_export_mode: str [Default: 'embedded']
#    docling_num_threads: int [Default: 4.0]
#    docling_pdf_backend: str [Default: 'dlparse_v4']
#    docling_remote_model_api_key: str [Default: '']
#    docling_remote_model_enabled: bool [Default: False]
#    docling_remote_model_endpoint_url: str [Default: '']
#    docling_remote_model_name: str [Default: '']
#    docling_table_mode: str [Default: 'accurate']
#    docling_timeout_per_document: int [Default: 0.0]
#    docling_use_vlm: bool [Default: False]
#    num_splits: int [Default: 3.0]
#    pdf_base_url: str [Default: 'https://github.com/docling-project/docling/raw/v2.43.0/tests/data/pdf']
#    pdf_filenames: str [Default: '2203.01017v2.pdf,2206.01062.pdf,2305.03393v1-pg9.pdf,2305.03393v1.pdf,amt_handbook_sample.pdf,code_and_formula.pdf,multi_page.pdf,redp5110_sampled.pdf']
components:
  comp-create-pdf-splits:
    executorLabel: exec-create-pdf-splits
    inputDefinitions:
      artifacts:
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the input directory containing PDF files.
      parameters:
        num_splits:
          description: Number of splits to create.
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: LIST
  comp-docling-convert:
    executorLabel: exec-docling-convert
    inputDefinitions:
      artifacts:
        artifacts_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the directory containing Docling models.
        input_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
          description: Path to the input directory containing PDF files.
      parameters:
        image_export_mode:
          defaultValue: embedded
          isOptional: true
          parameterType: STRING
        num_threads:
          defaultValue: 4.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        pdf_backend:
          defaultValue: dlparse_v4
          description: Backend to use for PDF processing.
          isOptional: true
          parameterType: STRING
        pdf_split:
          description: List of PDF file names to process.
          parameterType: LIST
        remote_model_api_key:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        remote_model_enabled:
          defaultValue: false
          isOptional: true
          parameterType: BOOLEAN
        remote_model_endpoint_url:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        remote_model_name:
          defaultValue: ''
          isOptional: true
          parameterType: STRING
        table_mode:
          defaultValue: accurate
          isOptional: true
          parameterType: STRING
        timeout_per_document:
          defaultValue: 0.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        use_vlm:
          defaultValue: false
          description: Use a vision model for conversion instead of standard PDF processing
            pipeline
          isOptional: true
          parameterType: BOOLEAN
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-download-docling-models:
    executorLabel: exec-download-docling-models
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-for-loop-1:
    dag:
      tasks:
        docling-convert:
          cachingOptions: {}
          componentRef:
            name: comp-docling-convert
          inputs:
            artifacts:
              artifacts_path:
                componentInputArtifact: pipelinechannel--download-docling-models-output_path
              input_path:
                componentInputArtifact: pipelinechannel--import-pdfs-output_path
            parameters:
              image_export_mode:
                componentInputParameter: pipelinechannel--docling_image_export_mode
              num_threads:
                componentInputParameter: pipelinechannel--docling_num_threads
              pdf_backend:
                componentInputParameter: pipelinechannel--docling_pdf_backend
              pdf_split:
                componentInputParameter: pipelinechannel--create-pdf-splits-Output-loop-item
              remote_model_api_key:
                componentInputParameter: pipelinechannel--docling_remote_model_api_key
              remote_model_enabled:
                componentInputParameter: pipelinechannel--docling_remote_model_enabled
              remote_model_endpoint_url:
                componentInputParameter: pipelinechannel--docling_remote_model_endpoint_url
              remote_model_name:
                componentInputParameter: pipelinechannel--docling_remote_model_name
              table_mode:
                componentInputParameter: pipelinechannel--docling_table_mode
              timeout_per_document:
                componentInputParameter: pipelinechannel--docling_timeout_per_document
              use_vlm:
                componentInputParameter: pipelinechannel--docling_use_vlm
          taskInfo:
            name: docling-convert
    inputDefinitions:
      artifacts:
        pipelinechannel--download-docling-models-output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        pipelinechannel--import-pdfs-output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--create-pdf-splits-Output:
          parameterType: LIST
        pipelinechannel--create-pdf-splits-Output-loop-item:
          parameterType: LIST
        pipelinechannel--docling_image_export_mode:
          parameterType: STRING
        pipelinechannel--docling_num_threads:
          parameterType: NUMBER_INTEGER
        pipelinechannel--docling_pdf_backend:
          parameterType: STRING
        pipelinechannel--docling_remote_model_api_key:
          parameterType: STRING
        pipelinechannel--docling_remote_model_enabled:
          parameterType: BOOLEAN
        pipelinechannel--docling_remote_model_endpoint_url:
          parameterType: STRING
        pipelinechannel--docling_remote_model_name:
          parameterType: STRING
        pipelinechannel--docling_table_mode:
          parameterType: STRING
        pipelinechannel--docling_timeout_per_document:
          parameterType: NUMBER_INTEGER
        pipelinechannel--docling_use_vlm:
          parameterType: BOOLEAN
  comp-import-pdfs:
    executorLabel: exec-import-pdfs
    inputDefinitions:
      parameters:
        pdf_base_url:
          description: Base URL of the PDF files.
          parameterType: STRING
        pdf_filenames:
          description: List of PDF filenames to import.
          parameterType: STRING
    outputDefinitions:
      artifacts:
        output_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-create-pdf-splits:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - create_pdf_splits
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef create_pdf_splits(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    num_splits: int,\n) -> List[List[str]]:\n    \"\"\"\n    Create a list\
          \ of PDF splits.\n\n    Args:\n        input_path: Path to the input directory\
          \ containing PDF files.\n        num_splits: Number of splits to create.\n\
          \    \"\"\"\n    from pathlib import Path\n\n    input_path_p = Path(input_path.path)\n\
          \n    all_pdfs = [path.name for path in input_path_p.glob(\"*.pdf\")]\n\
          \    return [all_pdfs[i::num_splits] for i in range(num_splits)]\n\n"
        image: registry.access.redhat.com/ubi9/python-311:9.6-1755074620
    exec-docling-convert:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - docling_convert
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef docling_convert(\n    input_path: dsl.Input[dsl.Artifact],\n\
          \    artifacts_path: dsl.Input[dsl.Artifact],\n    output_path: dsl.Output[dsl.Artifact],\n\
          \    pdf_split: List[str],\n    pdf_backend: str = \"dlparse_v4\",\n   \
          \ image_export_mode: str = \"embedded\",\n    table_mode: str = \"accurate\"\
          ,\n    num_threads: int = 4,\n    timeout_per_document: int = 0,\n    remote_model_enabled:\
          \ bool = False,\n    remote_model_endpoint_url: str = \"\",\n    remote_model_api_key:\
          \ str = \"\",\n    remote_model_name: str = \"\",\n    use_vlm: bool = False,\n\
          ):\n    \"\"\"\n    Convert a list of PDF files to JSON and Markdown using\
          \ Docling.\n\n    Args:\n        input_path: Path to the input directory\
          \ containing PDF files.\n        pdf_split: List of PDF file names to process.\n\
          \        pdf_backend: Backend to use for PDF processing.\n        artifacts_path:\
          \ Path to the directory containing Docling models.\n        output_path:\
          \ Path to the output directory for JSON and Markdown files.\n        use_vlm:\
          \ Use a vision model for conversion instead of standard PDF processing pipeline\n\
          \    \"\"\"\n    import os\n    from importlib import import_module\n  \
          \  from pathlib import Path\n\n    from docling_core.types.doc.base import\
          \ ImageRefMode  # pylint: disable=import-outside-toplevel  # noqa: PLC0415,\
          \ E402\n    from docling.datamodel.base_models import InputFormat  # pylint:\
          \ disable=import-outside-toplevel  # noqa: PLC0415, E402\n    from docling.datamodel.pipeline_options\
          \ import (  # pylint: disable=import-outside-toplevel  # noqa: PLC0415,\
          \ E402\n        PdfPipelineOptions,\n        PdfBackend,\n        TableFormerMode,\n\
          \        VlmPipelineOptions,\n    )\n    from docling.document_converter\
          \ import DocumentConverter, PdfFormatOption  # pylint: disable=import-outside-toplevel\
          \  # noqa: PLC0415, E402\n    from docling.datamodel.accelerator_options\
          \ import AcceleratorDevice, AcceleratorOptions  # pylint: disable=import-outside-toplevel\
          \  # noqa: PLC0415, E402\n    from docling.datamodel.pipeline_options_vlm_model\
          \ import ApiVlmOptions, ResponseFormat # pylint: disable=import-outside-toplevel\
          \  # noqa: PLC0415, E402\n\n    allowed_backends = {e.value for e in PdfBackend}\n\
          \    if pdf_backend not in allowed_backends:\n        raise ValueError(\n\
          \            f\"Invalid pdf_backend: {pdf_backend}. Must be one of {sorted(allowed_backends)}\"\
          \n        )\n\n    input_path_p = Path(input_path.path)\n    artifacts_path_p\
          \ = Path(artifacts_path.path)\n    output_path_p = Path(output_path.path)\n\
          \    output_path_p.mkdir(parents=True, exist_ok=True)\n\n    input_pdfs\
          \ = [input_path_p / name for name in pdf_split]\n    print(f\"docling-convert:\
          \ starting with backend='{pdf_backend}', files={len(input_pdfs)}\", flush=True)\n\
          \n    if remote_model_enabled:\n        pipeline_options = VlmPipelineOptions(\n\
          \            enable_remote_services=True,\n        )\n        pipeline_options.vlm_options\
          \ = ApiVlmOptions(\n            url=remote_model_endpoint_url, # type: ignore[arg-type]\n\
          \            params=dict(\n                model_id=remote_model_name,\n\
          \                parameters=dict(\n                    max_new_tokens=400,\n\
          \                ),\n            ),\n            prompt=\"OCR the full page\
          \ to markdown.\",\n            timeout=360,\n            response_format=ResponseFormat.MARKDOWN,\n\
          \            headers={\n                \"Authorization\": f\"Bearer {remote_model_api_key}\"\
          ,\n            },\n        )\n    if use_vlm:\n        pipeline_options\
          \ = VlmPipelineOptions()\n        pipeline_cls = VlmPipeline\n\n    else:\n\
          \        pipeline_options = PdfPipelineOptions()\n        pipeline_options.artifacts_path\
          \ = artifacts_path_p\n        pipeline_options.do_ocr = True\n        pipeline_options.do_table_structure\
          \ = True\n        pipeline_options.table_structure_options.do_cell_matching\
          \ = True\n        pipeline_options.generate_page_images = True\n       \
          \ pipeline_options.table_structure_options.mode = TableFormerMode(table_mode)\n\
          \        pipeline_cls = StandardPdfPipeline\n\n    pipeline_options.document_timeout\
          \ = float(timeout_per_document)\n    pipeline_options.accelerator_options\
          \ = AcceleratorOptions(\n        num_threads=num_threads, device=AcceleratorDevice.AUTO\n\
          \    )\n\n    backend_to_impl = {\n        PdfBackend.PYPDFIUM2.value: (\n\
          \            \"docling.backend.pypdfium2_backend\",\n            \"PyPdfiumDocumentBackend\"\
          ,\n        ),\n        PdfBackend.DLPARSE_V1.value: (\n            \"docling.backend.docling_parse_backend\"\
          ,\n            \"DoclingParseDocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V2.value:\
          \ (\n            \"docling.backend.docling_parse_v2_backend\",\n       \
          \     \"DoclingParseV2DocumentBackend\",\n        ),\n        PdfBackend.DLPARSE_V4.value:\
          \ (\n            \"docling.backend.docling_parse_v4_backend\",\n       \
          \     \"DoclingParseV4DocumentBackend\",\n        ),\n    }\n\n    module_name,\
          \ class_name = backend_to_impl[pdf_backend]\n    backend_class = getattr(import_module(module_name),\
          \ class_name)\n\n    pipeline_options.document_timeout = float(timeout_per_document)\n\
          \    pipeline_options.accelerator_options = AcceleratorOptions(\n      \
          \  num_threads=num_threads, device=AcceleratorDevice.AUTO\n    )\n\n   \
          \ doc_converter = DocumentConverter(\n        format_options={\n       \
          \     InputFormat.PDF: PdfFormatOption(\n                pipeline_cls=pipeline_cls,\n\
          \                pipeline_options=pipeline_options,\n                backend=backend_class,\n\
          \            )\n        }\n    )\n\n    easyocr_path_p = artifacts_path_p\
          \ / \"EasyOcr\"\n    os.environ[\"MODULE_PATH\"] = str(easyocr_path_p)\n\
          \    os.environ[\"EASYOCR_MODULE_PATH\"] = str(easyocr_path_p)\n\n    results\
          \ = doc_converter.convert_all(input_pdfs, raises_on_error=True)\n\n    for\
          \ result in results:\n        doc_filename = result.input.file.stem\n\n\
          \        output_json_path = output_path_p / f\"{doc_filename}.json\"\n \
          \       print(f\"docling-convert: saving {output_json_path}\", flush=True)\n\
          \        result.document.save_as_json(output_json_path, image_mode=ImageRefMode(image_export_mode))\n\
          \n        output_md_path = output_path_p / f\"{doc_filename}.md\"\n    \
          \    print(f\"docling-convert: saving {output_md_path}\", flush=True)\n\
          \        result.document.save_as_markdown(output_md_path, image_mode=ImageRefMode(image_export_mode))\n\
          \n    print(\"docling-convert: done\", flush=True)\n\n"
        image: quay.io/fabianofranz/docling-ubi9:2.45.0
        resources:
          cpuLimit: 4.0
          cpuRequest: 0.5
          memoryLimit: 6.0
          memoryRequest: 1.0
          resourceCpuLimit: '4'
          resourceCpuRequest: 500m
          resourceMemoryLimit: 6G
          resourceMemoryRequest: 1G
    exec-download-docling-models:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_docling_models
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_docling_models(\n    output_path: dsl.Output[dsl.Artifact],\n\
          ):\n    \"\"\"\n    Download Docling models.\n\n    Args:\n        output_path:\
          \ Path to the output directory for Docling models.\n    \"\"\"\n    from\
          \ pathlib import Path\n    from docling.utils.model_downloader import download_models\n\
          \n    output_path_p = Path(output_path.path)\n\n    output_path_p.mkdir(parents=True,\
          \ exist_ok=True)\n\n    download_models(\n        output_dir=output_path_p,\n\
          \        progress=True,\n        with_layout=True,\n        with_tableformer=True,\n\
          \        with_easyocr=True,\n        with_smoldocling=True,\n        with_smoldocling_mlx=True,\n\
          \        with_smolvlm=True,\n    )\n\n"
        image: quay.io/fabianofranz/docling-ubi9:2.45.0
    exec-import-pdfs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - import_pdfs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'requests'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.2'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef import_pdfs(\n    pdf_base_url: str,\n    pdf_filenames: str,\n\
          \    output_path: dsl.Output[dsl.Artifact],\n):\n    \"\"\"\n    Import\
          \ PDF filenames (comma-separated) from specified base URL.\n\n    Args:\n\
          \        pdf_base_url: Base URL of the PDF files.\n        pdf_filenames:\
          \ List of PDF filenames to import.\n        output_path: Path to the output\
          \ directory for the PDF files.\n    \"\"\"\n    from pathlib import Path\n\
          \    import requests\n\n    output_path_p = Path(output_path.path)\n   \
          \ output_path_p.mkdir(parents=True, exist_ok=True)\n\n    if not pdf_base_url:\n\
          \        raise ValueError(\"base_url must be provided\")\n\n    filenames\
          \ = [name.strip() for name in pdf_filenames.split(\",\") if name.strip()]\n\
          \    if not filenames:\n        raise ValueError(\"pdf_filenames must contain\
          \ at least one filename (comma-separated)\")\n\n    for name in filenames:\n\
          \        url = f\"{pdf_base_url.rstrip('/')}/{name.lstrip('/')}\"\n    \
          \    dest = output_path_p / name\n        print(f\"import-test-pdfs: downloading\
          \ {url} -> {dest}\", flush=True)\n        with requests.get(url, stream=True,\
          \ timeout=30) as resp:\n            resp.raise_for_status()\n          \
          \  with dest.open(\"wb\") as f:\n                for chunk in resp.iter_content(chunk_size=8192):\n\
          \                    if chunk:\n                        f.write(chunk)\n\
          \    print(\"import-test-pdfs: done\", flush=True)\n\n"
        image: registry.access.redhat.com/ubi9/python-311:9.6-1755074620
pipelineInfo:
  description: Docling convert pipeline by the Data Processing Team
  name: data-processing-docling-pipeline
root:
  dag:
    tasks:
      create-pdf-splits:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-create-pdf-splits
        dependentTasks:
        - import-pdfs
        inputs:
          artifacts:
            input_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-pdfs
          parameters:
            num_splits:
              componentInputParameter: num_splits
        taskInfo:
          name: create-pdf-splits
      download-docling-models:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-docling-models
        taskInfo:
          name: download-docling-models
      for-loop-1:
        componentRef:
          name: comp-for-loop-1
        dependentTasks:
        - create-pdf-splits
        - download-docling-models
        - import-pdfs
        inputs:
          artifacts:
            pipelinechannel--download-docling-models-output_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: download-docling-models
            pipelinechannel--import-pdfs-output_path:
              taskOutputArtifact:
                outputArtifactKey: output_path
                producerTask: import-pdfs
          parameters:
            pipelinechannel--create-pdf-splits-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: create-pdf-splits
            pipelinechannel--docling_image_export_mode:
              componentInputParameter: docling_image_export_mode
            pipelinechannel--docling_num_threads:
              componentInputParameter: docling_num_threads
            pipelinechannel--docling_pdf_backend:
              componentInputParameter: docling_pdf_backend
            pipelinechannel--docling_remote_model_api_key:
              componentInputParameter: docling_remote_model_api_key
            pipelinechannel--docling_remote_model_enabled:
              componentInputParameter: docling_remote_model_enabled
            pipelinechannel--docling_remote_model_endpoint_url:
              componentInputParameter: docling_remote_model_endpoint_url
            pipelinechannel--docling_remote_model_name:
              componentInputParameter: docling_remote_model_name
            pipelinechannel--docling_table_mode:
              componentInputParameter: docling_table_mode
            pipelinechannel--docling_timeout_per_document:
              componentInputParameter: docling_timeout_per_document
            pipelinechannel--docling_use_vlm:
              componentInputParameter: docling_use_vlm
        parameterIterator:
          itemInput: pipelinechannel--create-pdf-splits-Output-loop-item
          items:
            inputParameter: pipelinechannel--create-pdf-splits-Output
        taskInfo:
          name: for-loop-1
      import-pdfs:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-import-pdfs
        inputs:
          parameters:
            pdf_base_url:
              componentInputParameter: pdf_base_url
            pdf_filenames:
              componentInputParameter: pdf_filenames
        taskInfo:
          name: import-pdfs
  inputDefinitions:
    parameters:
      docling_image_export_mode:
        defaultValue: embedded
        isOptional: true
        parameterType: STRING
      docling_num_threads:
        defaultValue: 4.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      docling_pdf_backend:
        defaultValue: dlparse_v4
        isOptional: true
        parameterType: STRING
      docling_remote_model_api_key:
        defaultValue: ''
        isOptional: true
        parameterType: STRING
      docling_remote_model_enabled:
        defaultValue: false
        isOptional: true
        parameterType: BOOLEAN
      docling_remote_model_endpoint_url:
        defaultValue: ''
        isOptional: true
        parameterType: STRING
      docling_remote_model_name:
        defaultValue: ''
        isOptional: true
        parameterType: STRING
      docling_table_mode:
        defaultValue: accurate
        isOptional: true
        parameterType: STRING
      docling_timeout_per_document:
        defaultValue: 0.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      docling_use_vlm:
        defaultValue: false
        isOptional: true
        parameterType: BOOLEAN
      num_splits:
        defaultValue: 3.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      pdf_base_url:
        defaultValue: https://github.com/docling-project/docling/raw/v2.43.0/tests/data/pdf
        isOptional: true
        parameterType: STRING
      pdf_filenames:
        defaultValue: 2203.01017v2.pdf,2206.01062.pdf,2305.03393v1-pg9.pdf,2305.03393v1.pdf,amt_handbook_sample.pdf,code_and_formula.pdf,multi_page.pdf,redp5110_sampled.pdf
        isOptional: true
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.14.2
